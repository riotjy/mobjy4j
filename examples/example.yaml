#*******************************************************************************
# Copyright 2020 riotjy and listed authors
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#    
#    Authors:
#      Alex Savulov
#*******************************************************************************
%YAML 1.1
---
# YAML defined model example
project: demoProject

version:
  major: 1
  minor: 0
  revision: 3
  status: release     # alpha | beta | release
  candidate: 0

compatver:
  major: 1
  minor: 0
  revision: 0
  status: release
  candidate: 0

java:                    # project level language dependent setting
  package: dev.riotjy.demoProject
  
cpp:
  namespace: demoproject
  
csharp:                  # c# support not implemented yet
  namespace: DemoProject

#NOTES:
#keywords: 
#  class, extends, type, collection, references, meta
#  bool, int, string, float, double, 
#  version, compatver, project
#  java, cpp, csharp, path, resource, references
#
#structure:
#  Except the first level elements that are keywords (see above)
#  All other first level elements are classes (objects) definitions
#  which can contain fields
#  All second level elements are fields of classes (objects)
#  The YAML hierarchy of mappings gives the structure of the classes
#
#guidance:
#  The only restrictions on the syntax used in this model definition
#  file are imposed by the YAML 1.1 specification.
#  It is recommended to avoid using any language specific keywords 
#  as class or field names. There is currently no check for that,
#  the model developer is responsible for ensuring that.
#  The only structural restriction for the class model currently
#  is that cyclic inheritance is not allowed. If encountered,
#  the processing of the model will fail.

# classes definition example
BaseClass:                # creates class BaseClass with the following fields(members)
# primitives
  intBase: int            # creates an int field (see below example for all primitives supported)

  objBase:                # creates an object of type RefClassOne
    type: RefClassOne
  objArrBase:             # creates an array list of objects of type RefClassTwo
    type: RefClassTwo
    collection: arrayList 
  objMapBase:             # creates a hash map <string, RefClassTwo>
    type: RefClassTwo
    collection: hashMap


DervClassOne:             # creates class DervClassOne extending BaseClass
  extends: BaseClass  
  intDervOne: int
  strDervOne: string
  objDervOne:
    type: RefClassOne
    collection: arrayList
  mapOneDervOne:
    type: RefClassTwo
    collection: hashMap


DervClassTwo:             # creates class DervClassOne extending DervClassTwo
  extends: DervClassOne
  intDervTwo: int
  strDervTwo: string
  objDervTwo:
    type: ExternalClassType
  mapDervTwo:
    type: ExternalClassType4Coll
    collection: hashMap


RefClassOne:              #creates class RefClassOne
  intRefOne: int
  strRefOne: string


RefClassTwo:              #creates class RefClassTwo
  intRefTwo: int
  strRefTwo: string


ExternalClassType:        # wraps an external class to be imported and used as type
   java:
      path: dev.riotjy.demo.extclass.ExtClassJ  # import directive
      class: ExtClassJ                          # actuall language dependent class name
   cpp:
      path: '"ext/ExtClassCpp.hpp"'             # include directive
      class: ExtClassCpp                        # actuall language dependent class name
   csharp:
      path: n1.n2.ExtClassCS                    # using directive
      class: ExtClassCS                         # actuall language dependent class name

ExternalClassType4Coll:    # wraps an external class to be imported and used as type
   java:
      path: dev.riotjy.demo.extclass.ExtClass4CollJ
      class: ExtClass4CollJ
   cpp:
      path: '"ext/ExtClass4CollCpp.hpp"'        # using single quotes to specify relative path
      class: ExtClass4CollCpp
   csharp:
      path: ns1.ns2
      class: ExtClass4CollCS


PrimitivesClass:
  boolOne: bool
  charOne: char
  byteOne: byte
  shortOne: short
  intOne: int
  longOne: long
  flOne: float
  dblOne: double
  strOne: string

  intTwo: int         # shorthand style for primitives
  intThree:           # detailed style for primitives (needed when using annotations, see below example)
    type: int
  intArrOne: int[]    # creates an array of integer primitives (shorthand notation)

  boolArrOne: bool[]  # creates an array of booleans (somewhat inefficient)
  strArrOne: string[] # creates an array list of strings
  flArr: float[]      # creates an array list of single precision float primitives
  dblArrOne: double[] # creates an array list of double precision float primitives

  dblArrTwo:          # detailed style for primitives (needed when using annotations, see below example)
    type: double
    collection: arrayList


AnnotatedClass:
  meta:                                          # class level meta data
    java:                                        # java annotations
      Entity:                                    # creates @Entity
      Table: '(name = "ANNOTATED_TABLE")'        # creates @Table(name="ANNOTATED_TABLE")
    csharp:                                      # c# attributes (not implemented yet)
      Attr1: 'attr text/content/value'           # creates [Attr1(attr text/content/value)]

  id:                                            # creates an annotated integer
    type: int
    meta:                                        # field level meta data
      java:                                      # java annotations
        Id: '()'                                 # creates @Id()
        GeneratedValue:                          # creates @GeneratedValuesomesetting
        Column: '(name = "id")'                  # creates @Column(name="id")
      csharp:                                    # c# attributes (not implemented yet)
        Attr2: 'attr text/content/value'         # creates [Attr2(attr text/content/value)]
        
  intArrExample:                                 # creates an annotated array of integer primitives
    type: int
    collection: arrayList
    meta:
      java:
        ManyToAny: '(metaColumn = @Column(name = "property_type"))'
        JoinColumn: |-                           # multiline annotation using |-
          (name="parent_id", insertable=false,
              updatable=false, nullable=false)   # using more spaces to indent the second line
        OrderColumn: '(name="order")'  